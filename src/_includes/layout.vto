<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ title }}</title>
    <style>
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      }
      body {
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
          sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
      }
      .container {
        max-width: 900px;
        margin: 0 auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
      }
      .header {
        background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);
        color: white;
        padding: 20px;
        text-align: center;
      }
      .header h1 {
        font-size: 2em;
        margin-bottom: 10px;
      }
      .controls {
        padding: 20px;
        background: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        gap: 15px;
        align-items: center;
        flex-wrap: wrap;
      }
      .editor-container {
        padding: 20px;
      }
      .quill-editor {
        height: 320px;
      }

      /* Quill error highlight */
      .ql-editor .grammar-typo {
        text-decoration: underline;
        text-decoration-color: red;
        text-decoration-style: wavy;
      }
      .ql-editor .grammar-other {
        text-decoration: underline;
        text-decoration-color: blue;
        text-decoration-style: wavy;
      }
      .status-bar {
        padding: 15px 20px;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      @media (max-width: 768px) {
        .controls {
          flex-direction: column;
          align-items: stretch;
        }
        .status-bar {
          flex-direction: column;
          gap: 10px;
          text-align: center;
        }
      }
    </style>
    <link
      href="https://cdn.quilljs.com/1.3.7/quill.snow.css"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>{{ title }}</h1>
        <p>{{ description }}</p>
      </div>
      {{ content }}
    </div>
    <script src="https://cdn.quilljs.com/1.3.7/quill.min.js"></script>
    <script src="quill-bridge.js"></script>
    <script>
      if (document.getElementById("editor")) {
        const quill = new Quill("#editor", {
          theme: "snow",
        });

        quill.root.setAttribute("spellcheck", "false");

        const checkBtn = document.getElementById("check-btn");
        const clearBtn = document.getElementById("clear-btn");
        const statusText = document.getElementById("status-text");
        const errorCount = document.getElementById("error-count");
        const languageSelect = document.getElementById("language-select");

        async function checkGrammar(text, lang) {
          if (!text.trim()) {
            return { text, errs: [] };
          }

          const response = await fetch(
            "https://api-giellalt.uit.no/grammar/" + lang,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ text }),
            }
          );

          if (!response.ok) {
            throw new Error(
              `API request failed with status ${response.status}`
            );
          }

          return await response.json();
        }

        function clearHighlights() {
          const length = quill.getLength();
          quill.formatText(0, length, "grammar-typo", false);
          quill.formatText(0, length, "grammar-other", false);
        }

        function highlightErrors(errs) {
          console.log("highlightErrors called with errs:", errs);
          errs.forEach((err) => {
            const start = err.start_index;
            const len = err.end_index - start;
            const isTypo =
              err.error_code === "typo" ||
              (err.title && err.title.toLowerCase().includes("typo"));
            const format = isTypo ? "grammar-typo" : "grammar-other";
            console.log("applying format", format, "at", start, "len", len);
            quill.formatText(start, len, format, true);
          });
          console.log('HTML after highlighting:', quill.root.innerHTML);
        }

        checkBtn.addEventListener("click", async () => {
          statusText.textContent = "Checking...";
          const text = quill.getText();
          const lang = languageSelect.value;
          console.log(
            "checking text:",
            JSON.stringify(text),
            "length:",
            text.length,
            "quill length:",
            quill.getLength()
          );
          try {
            clearHighlights();
            const result = await checkGrammar(text, lang);
            console.log("result:", result);
            highlightErrors(result.errs);
            let count = result.errs?.length || 0;
            errorCount.textContent = `${count} error${count !== 1 ? "s" : ""}`;
            statusText.textContent = "Complete";
          } catch (e) {
            console.error("error:", e);
            statusText.textContent = "Error";
            errorCount.textContent = "0 errors";
          }
        });

        clearBtn.addEventListener("click", () => {
          quill.setText("");
          clearHighlights();
          errorCount.textContent = "0 errors";
          statusText.textContent = "Ready";
        });
      }
    </script>
  </body>
</html>
